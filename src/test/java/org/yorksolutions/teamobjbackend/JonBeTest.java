package org.yorksolutions.teamobjbackend;

import org.junit.jupiter.api.Order;
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.http.HttpStatus;
import org.springframework.web.server.ResponseStatusException;
import org.yorksolutions.teamobjbackend.controllers.AccountController;
import org.yorksolutions.teamobjbackend.controllers.ProductController;
import org.yorksolutions.teamobjbackend.dtos.AccountInfo.AccountDTO;
import org.yorksolutions.teamobjbackend.dtos.AccountInfo.CartChangeDTO;
import org.yorksolutions.teamobjbackend.dtos.AccountInfo.OrderDTO;
import org.yorksolutions.teamobjbackend.dtos.RequestDTO;
import org.yorksolutions.teamobjbackend.entities.Account;
import org.yorksolutions.teamobjbackend.entities.AccountPermission;
import org.yorksolutions.teamobjbackend.services.AccountService;

import java.util.List;

import static org.junit.jupiter.api.Assertions.assertNotNull;


@SpringBootTest
public class JonBeTest {
//    @Test
//    public void testCreate(){
//        Account a = new Account();
////        a.getId();
////        a.getPastOrders();
////        ID should be autogenerated when created by account
////        past orders should be null for a new account
//        a.setEmail("hello@hello.com");
//        a.setPermission(AccountPermission.ADMIN);
////        will test for each permission level: Customer, Shopkeeper, Admin
//        a.setPassword("hello");
//        accountRepository.save();
//        assertNotNull(accountRepository.findAccountByEmail("hello@hello.com").get());
//        assertNotNull(accountRepository.findAccountByPermission(AccountPermission.ADMIN).get());
//        //set account to see if a new account is created per the parameters above
//
//    }
//
//    @Test
//    public void testGetAllAccounts(){
//        List<Account> list = (List<Account>) accountRepository.findAll();
//        assertThat(list).size().isGreaterThan(0);
//        //retrieve all existing accounts
//        //account should have been created so there should be one existing
//        // account already if previous test was successful
//    }
    private AccountController accountController;
    private ProductController productController;

    @Autowired
    public JonBeTest(AccountController accountController, ProductController productController)
    {
        this.accountController = accountController;
        this.productController = productController;
    }

    @Test
    public void testLogin() throws Exception
    {
        String val = login("admin","admin");
        assert(val != null);
    }


    @Test
    public void testUserRegisterAndLogin() throws Exception
    {
        accountController.ClearAllExceptAdmin();
        //Test admin login
        String adminID = login("admin","admin");
        //Test random user register - null Account perms and non null
        String customerID1 = createUser(null,"customer1","1234",AccountPermission.CUSTOMER);
        String customerID2 = createUser(null,"customer2","1234",null);
        //Test admin register user
        String shopkeeperID1 = createUser(adminID,"customer3","1234",AccountPermission.CUSTOMER);
        //Test admin register user null AP
        String customerID4 = createUser(adminID,"customer4","1234",null);
        //Test admin register shopkeeper
        String shopkeerpID1 = createUser(adminID,"shopkeeper1","1234",AccountPermission.SHOPKEEPER);
        //Test admin create admin
        String adminID2 = createUser(adminID,"admin2","1234",AccountPermission.ADMIN);


        //Now for invalid registers

        //Test non-unique email
        assert ResponseFailureCheck( () ->
        {
            createUser(null,"customer1","1234",AccountPermission.CUSTOMER);

        },HttpStatus.CONFLICT) : "Created customer with existing email";

        //Test admin create existing email
        assert ResponseFailureCheck( () ->
        {
            createUser(adminID,"customer1","1234",AccountPermission.CUSTOMER);

        },HttpStatus.CONFLICT) : "Created customer with existing email";

        //Test user creation elevated permission
        assert ResponseFailureCheck( () ->
        {
            createUser(null,"badShopkeeper1","1234",AccountPermission.SHOPKEEPER);

        },HttpStatus.FORBIDDEN) : "Non-admin created user with elevated permissions";

        //test login with one of accounts
        login("customer1","1234");


    }

    @Test
    public void testAccountUpdates()
    {
        accountController.ClearAllExceptAdmin();
        //Test admin login
        String adminID = login("admin","admin");
        String customerID1 = createUser(null,"customer1","1234",null);
        String shopkeeperID1 = createUser(adminID,"shopkeeper1","1234",AccountPermission.SHOPKEEPER);
        String adminID1 = createUser(adminID,"admin1","1234",AccountPermission.ADMIN);

        updateUser(customerID1,"customer1new","12345",AccountPermission.CUSTOMER);

        //no need to assert failure check since any account can be continually updated

    }

    @Test
    public void testGetUsers(){
        accountController.ClearAllExceptAdmin();
        String adminID = login("admin", "admin");
        //Test admin login
        String adminID2 = createUser(adminID,"admin2","12345",AccountPermission.ADMIN);
        String customerID1 = createUser(null,"customer1","1234",null);
        String shopkeeperID1 = createUser(adminID,"shopkeeper1","1234",AccountPermission.SHOPKEEPER);
        String adminID1 = createUser(adminID,"admin1","1234",AccountPermission.ADMIN);
        getUsers(adminID2);

    }
    //how to retrieve list of all accounts if parameters specify userID

    @Test
    public void testFindUser() throws Exception {
        String adminID = login("admin", "admin");
        //Test admin login

        findUser(adminID, "customer1new");
        //testing finduser for each account
    }

    @Test
    public void testFindUser1() {
        String adminID = login("admin", "admin");
        //Test admin login

        findUser(adminID, "shopkeeper1");
        //testing finduser for each account
    }

    @Test
    public void testFindUser2() {
        String adminID = login("admin", "admin");
        //Test admin login

        findUser(adminID, "admin1");
        //testing finduser for each account
    }

    @Test
    public void testDeleteUser() throws Exception {
        accountController.ClearAllExceptAdmin();
        String adminID = login("admin", "admin");
//        Test admin login
//        User accounts already created above, testdelete will be focused on deleting existing accounts
        String customerID1 = createUser("customerID1", "customer1new", "12345", AccountPermission.CUSTOMER);
        String shopkeeperID1 = createUser(adminID, "shopkeeper1", "1234", AccountPermission.SHOPKEEPER);
//        String adminID1 = createUser(adminID, "admin1", "1234", AccountPermission.ADMIN);

        deleteUser(adminID, "customer1new", "12345", AccountPermission.CUSTOMER);
        deleteUser(adminID,  "shopkeeper1", "1234", AccountPermission.SHOPKEEPER);
        //delete customer1new user which was previously updated

        assert ResponseFailureCheck(() ->
                {
                    // User already deleted
                    // We are asserting that if we try to delete the same user, we will get an exception
                    deleteUser("customerID1", "customer1new", "12345", AccountPermission.CUSTOMER);

                }
                , HttpStatus.BAD_REQUEST) : "Customer does not exist.";
//        updated to bad request
    }
    @Test
    public void testGetOrders(){
        accountController.ClearAllExceptAdmin();
        String adminID = login("admin", "admin");
        String customerID1 = createUser(null, "customer1new", "12345", AccountPermission.CUSTOMER);
        //currentCustomer will hold the returned account from findUser
        Account currentCustomer = findUser(adminID, "customer1new");
        //Now we use getId() method from the Account entities.
        //Retrieve the userId and assign to String customerUserId
        String customerUserId = currentCustomer.getId();
        // We pass the actual userId through to getOrders
        // getOrders calls the controller then service and uses the userId to retrieve orders.
        getOrders(customerUserId);
    }


//    TODO* Get All, Permission Level, Checkout, Orders, Add to Cart, Get Cart

    @Test
    public void testPermission() throws ResponseStatusException{
//        return null;
        //placeholder
    }

    @Test
    public void testCheckout() throws ResponseStatusException{

    }

    @Test
    public List<OrderDTO> testOrderHist() throws ResponseStatusException{
        return null;
        //placeholder
    }

    @Test
    public void testAddToCart() throws ResponseStatusException{

    }

    @Test
    OrderDTO testGetCart() throws ResponseStatusException{
        return null;
        //placeholder
    }

    //    TODO* Get All, Permission Level, Checkout, Orders, Add to Cart, Get Cart
    public void deleteUser(String userID, String email, String password, AccountPermission permission) throws ResponseStatusException{
        AccountDTO dto = new AccountDTO();
        dto.userID = userID;
        dto.email = email;
        dto.password = password;
        dto.permission = permission != null ? permission.name() : null;
        this.accountController.DeleteAccount(dto);
    }

// TODO*

    public OrderDTO getCart(String userID) throws ResponseStatusException{
        RequestDTO dto = new RequestDTO();
        dto.userID = userID;
        return this.accountController.GetCart(dto.userID);
    }

    public void addToCart(CartChangeDTO dto) throws ResponseStatusException{
        this.accountController.ChangeCart(dto);
    }

    public List<OrderDTO> getOrders(String userID) throws ResponseStatusException{
        RequestDTO dto = new RequestDTO();
        dto.userID = userID;
        return this.accountController.GetOrderHistory(dto.userID);
    }

    public void getCheckout(String userID) throws ResponseStatusException{
        RequestDTO dto = new RequestDTO();
        dto.userID = userID;
    }

    public String getPermission(String userID) throws ResponseStatusException{
        RequestDTO dto = new RequestDTO();
        dto.userID = userID;

        return this.accountController.GetMyPermissionLevel(dto.userID);
    }
    public List<Account> getUsers(String userID) {
        RequestDTO dto = new RequestDTO();
        dto.userID = userID;

        return this.accountController.GetAllAccounts(userID);
    }

    public Account findUser(String userID, String email){
        AccountDTO dto = new AccountDTO();
        dto.userID = userID;
        dto.email = email;
        return this.accountController.FindAccount(userID, email);
    }

    public void updateUser(String userID, String email, String password, AccountPermission permission)
    {
        AccountDTO dto = new AccountDTO();
        dto.userID = userID;
        dto.email = email;
        dto.password = password;
        dto.permission = permission != null ? permission.name() : null;
        this.accountController.ChangeAccountInfo(dto);
    }
    public String login(String email, String password) throws ResponseStatusException
    {
        AccountDTO dto = new AccountDTO();
        dto.email = email;
        dto.password = password;
        String val = this.accountController.Login(dto);
        return val;
    }
    public String createUser(String userID, String email, String password, AccountPermission perm) throws
    ResponseStatusException
    {
        AccountDTO dto = new AccountDTO();
        dto.userID = userID;
        dto.email = email;
        dto.password = password;
        if (perm != null) {
            dto.permission = perm.name();
        }

        return this.accountController.RegisterNewUser(dto);
    }

    public boolean ResponseFailureCheck (NoArgResponseOperator lambda, HttpStatus status) throws Exception
    {
        try {
            lambda.op();
            return false;
        } catch (ResponseStatusException exception) {
            if (exception.getStatus() != status) {
                throw new Exception("Exception status" + exception.getStatus() + " and " + status + " did not match");
            }
            return exception.getStatus() == status;
        }
    }
    public boolean ResponseSuccessCheck (NoArgResponseOperator lambda)
    {
        try {
            lambda.op();
            return true;
        } catch (ResponseStatusException exception) {
            exception.printStackTrace();
            return false;
        }
        }

    }






